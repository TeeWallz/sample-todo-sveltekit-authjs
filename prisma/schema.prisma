//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
    directUrl = env("DATABASE_DIRECT_URL")
    schemas = ["base", "todo_app"]
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["multiSchema"]
}

enum SpaceUserRole {
    USER
    ADMIN
    @@schema("base")
}

/// @@deny('all', auth() == null)
/// @@allow('create', true)
/// @@allow('read', members ? [user == auth()])
/// @@allow('update,delete', members ? [user == auth() && role == ADMIN])
model Space {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    /// @length(4, 50)
    name String
    /// @regex('^[0-9a-zA-Z-_]{4,16}$')
    slug String @unique()
    members SpaceUser[]
    lists List[]

    @@schema("todo_app")
}

/// @@deny('all', auth() == null)
/// @@allow('create,update,delete', space.members ? [user == auth() && role == ADMIN])
/// @@allow('read', space.members ? [user == auth()])
model SpaceUser {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
    role SpaceUserRole

    @@unique([userId, spaceId])
    @@schema("todo_app")
}

/// @@deny('all', auth() == null)
/// @@allow('read', owner == auth() || (space.members ? [user == auth()] && !private))
/// @@allow('create', owner == auth() && space.members ? [user == auth()])
/// @@allow('update', owner == auth() && space.members ? [user == auth()] && future().owner == owner)
/// @@allow('delete', owner == auth())
model List {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    space Space @relation(fields: [spaceId], references: [id], onDelete: Cascade)
    spaceId String
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    /// @length(1, 100)
    title String
    private Boolean @default(false)
    todos Todo[]

    @@schema("todo_app")
}

/// @@deny('all', auth() == null)
/// @@allow('all', list.owner == auth())
/// @@allow('all', list.space.members ? [user == auth()] && !list.private)
/// @@deny('update', future().owner != owner)
model Todo {
    id String @id() @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    list List @relation(fields: [listId], references: [id], onDelete: Cascade)
    listId String
    /// @length(1, 100)
    title String
    completedAt DateTime?

    @@schema("todo_app")
}

model Account {
    id String @id() @default(cuid())
    userId String
    type String
    provider String
    providerAccountId String
    refresh_token String? @db.Text()
    access_token String? @db.Text()
    expires_at Int?
    token_type String?
    scope String?
    id_token String? @db.Text()
    session_state String?
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@schema("base")
}

model Session {
    id String @id() @default(cuid())
    sessionToken String @unique()
    userId String
    expires DateTime
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@schema("base")
}

/// @@allow('create,read', true)
/// @@allow('all', auth() == this)
model User {
    id String @id() @default(cuid())
    name String?
    email String? @unique()
    emailVerified DateTime?
    image String?
    accounts Account[]
    sessions Session[]
    spaces SpaceUser[]
    todos Todo[]
    lists List[]

    @@schema("base")
}

model VerificationToken {
    identifier String
    token String @unique()
    expires DateTime

    @@unique([identifier, token])
    @@schema("base")
}